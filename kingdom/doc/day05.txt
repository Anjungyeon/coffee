# day05

함수(Method, Function)
==> 한가지 작업을 실행하기 위해서 만들어진 가장 작은 단위의 프로그램이다.
	기능의 기본단위
	
	프로그램?
		이런함수들이 모여서 원하는 목적을 이루도록 구성된 것.
		
		예 ]
			charAt()	: 문자열중에서 한 문자를 알아내는 작업을 실행하기 위해 만들어진 것.
			random()	: 난수 하나를 발생시키는 작업을 실행하기 위해 만들어진 것.
	
	*********		
	참고 ]
		1. 함수는 누군가 호출해야 실행된다.
			즉, 스스로 실행되는 경우는 없다.
			
		2. 함수는 실행이 완료되면 자신을 호출한 곳으로 실행 순서를 넘긴다.
		
		
		예 ]
			
			class Test {
				void abc(){
					(1)
				}
				
				public static void main(String[] args){
					(2)
					xyz() 호출
					(3)
				}
				
				void xyz(){
					(4)
					abc() 호출
					(5)
				}
			}
			
			실행 순서 : 2 -> 4 -> 1 -> 5 -> 3
			
			
	함수 만드는 방법
		
		형식 ]
			
			[접근지정자] [속성] 반환값타입 함수이름(매개변수리스트){
				함수가 해야할 목적을 달성하기 위한 프로그램 작성...
			}
			
			1. 함수이름 : 개발자가 지정하는 사용자 정의어
			
			2. 매개변수리스트
				==> 변수선언 형태로 콤마(,) 단위로 분리해서 만들어준다.
					갯수는 상관없다.
					
				예 ]
					abc(int a, int b){
					}
					
				목적 ]
					이 함수가 원하는 일을 실행하기 위해서 반드시 필요한 데이터가 있을 것이다.
					이 데이터를 기억시켜서 함수내부에서 사용할 준비하는 것이다.
					
					예 ]
						charAt(int pos)	=> 원하는 위치의 문자를 알려주는 함수
											이 함수가 원하는 작업을 충실히 수행하기 위해서는
											위치값이 필요할 것이다.
											
						length()		==> 문자열의 길이를 알려주는 함수
											이 함수가 역할을 수행하기 위해서는 데이터가 필요없다.
											그냥 자신의 기억한 문자들의 갯수만 세어서 알려주면 된다.
											
				3. 반환값타입
					==> 함수는 한가지 목적을 달성하기 위한 가장 작은 단위의 프로그램
						==> 함수를 실행한다는 것은
							그 목적을 달성해야만 한다.
							그 달성된 목적에 따라 결과가 존재할 수도 있는 것이다.
							
					반환값 타입이란?
						이처럼 함수에게 뭔가 작업을 시켰을때
						그 함수가 일을 한 결과를 알려주는 것이다.
						이 결과는 경우에 따라서 달라진다.
						
						결과는 존재하는 결과값의 경우에 따라서 달라지기 때문에...
						단순히 결과값의 데이터 종류만 선언하면 된다.
						
					***
						자바에서 함수의 반환값은 반드시 특정타입 한개로만 반환해줄 수 있다.
						
						따라서 함수의 반환값은
							한개이거나 없을 수 있다.		
						
					예 ]
						
						char charAt(int pos)	==> 이 함수의 결과는 문자로 알려주게 되므로
													반환값의 유형은 char 가 된다.
													
					참고 ]
						함수 실행의 결과 반드시 존재하는 것은 아니다.
						예를 들어서
						뭔가를 콘솔화면에 출력하는 기능만 가지는 함수의 경우는
						이 함수는 출력을 하면 수행해야할 목적을 모두 달성하게 된다.
						따라서 결과물은 없게 된다.
						
						이런 경우에는 반환값타입에 아무것도 안써도 되는 것이 아니고
						반드시 반환값이 없다는 의미의
							"void"
						라고 기술해야한다.
						
						
						
				결론적으로 함수는 다음 네가지 형태로 정리된다.
					
					1.
						void abc(){
						}
						
					2.
						int abc(){
						}
						
					3. 
						void abc(int a){
						}
						
					4.
						int abc(int a){
						}
						
				***
				return 의 의미
				==> 함수 안에서 사용할 수 있는 명령
					
					의미 ]
						1. 함수실행을 종료하세요.
						2. 반환값이 있으면 반환값을 내보내고 종료하세요.
						
					형식 ]
						
						1. 
							return;
							==> 함수실행을 즉시종료
								반환값이 없는 경우(void) 사용
								
								반환값이 없는 경우 생략할 수도 있다.
						2. 
							return 데이터;
							==> 데이터를 반환해주고 함수실행을 즉시 종료
							
====================================================================================================
		
		함수의 사용방법
			==> 함수는 반드시 호출해야만 사용할 수 있다.
				함수를 사용하다는 것은 함수를 호출한다는 의미이다.
				
				형식 ]
					함수이름(데이터, ...);
					
					데이터란?
						함수는 그 함수가 실행되기 위해 필요한 데이터를 받을 준비를 하고 있다.
						(매개변수리스트 : Argument)
						따라서 그 함수에게 일을 시키기 위해서는
						필요한 데이터를 반드시 알려줘야 한다.
						==> 결론적으로 데이터(Parameter)?
							함수가 준비한 매개변수리스트에 기억할 데이터를 제공하는 것
							
						==> 데이터는 그 함수가 준비한 매개변수의 갯수와 반드시 일치해야 하고
							형태 역시 일치해야 한다.
							
							
					예 ]
						void abc(int a){}
						
						abc();			-	X( 필요한 데이터가 없다.)
						abc(5);			- 	O
						abc(3.14);		- 	X( 데이터의 형태가 맞지 않는다.)
						abc(3, 4);		- 	X( 데이터의 갯수가 다르다.)
						
						
				이렇게 하면 데이터가 정의된 매개변수에 대입되어서 그 함수가 실행된다.
				따라서
					매개변수는 함수내에서 사용되는 지역변수이다.
					
					
====================================================================================================
	반환값 사용방법
		==> 함수의 실행이 종료되면 반환값을 줄 수 있다.
			이 반환값은 함수 호출 부분(위치)에 그대로 들어온다.
			
			따라서 함수 호출 부분에 예상되는 반환값을 기록해보고
			문법적으로 이상이 없으면 그것이 반환값의 사용이 된다.
			
			예 1]
			float abc(){
				return 3.14F;
			}
			
			int no = 20 + abc();	--> X
			
			예 2]
				int abc(){
					int k = ?;
					return k;		-- 5 라고 가정
				}
				
				void xyz(int a){
				}
				
				int lmn(int a){
					return ??;	-- 10으로 가정
				}
				
				abc();	==> 5	==> 반환값이 있는 함수라도 필요하지 않으면 반환값을 사용하지 않아도 상관없다.
				int a = abc();	==> int a = 5;
				System.out.println(abc());
				xyz(abc());	==> xyz(5);
				
				abc(lmn());	==> abc(10); ---- 실패
				
				
				
							
							
						
				
					
			
			