# day08

예외처리
==> 프로그램적으로는 문제가 없으나
	(문법상 전혀 문제가 되지 않지만)
	데이터의 문제나 장비의 문제 등에 의해서 프로그램을 실행하는 도중
	발생하는 에러를 "실행 에러(Runtime Error)"라고 표현한다.
	이것을 자바에서는 "예외(Exception)"이라고 표현한다.
	
	문제는
	이런 예외는 개발자가 예측해서 이런문제가 발생했을 경우
	대처하는 방식으로 프로그램을 만들어야 한다.
	이처럼 예외가 발생했을 경우 대처하는 방식의 프로그램을
		"예외처리"
	라고 부른다.
	
	자바에서는 이런 문제점(예외 발생 원인을 개발자가 알고 있어야 한다.)
	을 해결하기 위해서 예외처리 문법이 존재한다.
	
	
	형식 ]
		
		(1)
		try {
			(2)
			a - 예외가 발생할 가능성이 있는 실행문
			(3)
		} catch(??????){
			(4) -- 예외가 발생했을 때 대처하는 부분
		} finally {
			(5)	-- 예외가 발생하던지 아니던지 맨마지막에 항상 실행되는 부분... 
		}
		(6)
		
		실행순서 ]
			
			1 --> 2 --> 예외가 발생한 경우 			---> 4 ---> 5 ---> 6
						예외가 발생하지 않은 경우	---> 3 ---> 5 ---> 6
						
		
		(3) 부분은 a 실행문이 예외가 발생하면 실행되지 않는다.
		
		
		예 ]
			
			try {
				파일을 오픈하고 ===> 파일이 없으면 에러가 발생한다.
			
				파일의 내용을 읽고
				그 내용을 화면에 출력
			} 
			
			이때 파일을 오픈할 때 예외가 발생하면 
			해당 블럭의 이후 코드는 실행하지 않는다.
=============================================================================================================
	자바의 예외처리 원리
		예외가 발생하면 JVM은 발생한 예외의 종류를 분석한 후
		예외에 대한 정보를 자바답게 클래스(객체)로 만들어서
		catch 부분에 그 클래스의 주소를 전달한다.
		
	catch의 의미
		==> 예외가 발생하면 그 예외의 정보를 받아서
			개발자가 그 정보를 이용해서 원하는 처리를 해줘야 한다.
			
	다중 catch
		==> try {} 안에 예외 발생요소가 
			여러가지 복합적인 예외 발생 요소를 가질 수 있다.
			
			이때 반드시 어떤 예외때문인지를 구분해야 하는 경우라면??
			이런 경우를 대비해서 만들어놓은 방법이 다중 catch 이다.
			
		형식 ]
			
			try { 
			} catch(예외1){
			} catch(예외2){
			...
			} catch(예외n){
			} [ finally{
			} ]
		
		***
		주의사항 ]
			다중 catch를 사용하는 경우
			반드시 실행될 수 있는 상태로 만들어야 한다.
			==> 좁은 범위의 catch가 반드시 먼저와야 한다.
			
	finally 블럭
	 	==> 예외 발생여부와 관계없이 반드시 실행되어야 할 문장이 존재할 경우
	 		이런 문장을 입력하는 블럭
	 		
	 
	 참고 ]
	 	만약 finally 존재하면 catch 블럭을 생략할 수도 있다.
	 	
예외 정보 출력하는 방법
==> 예외정보를 얻는 방법
	1. 예외정보클래스 변수를 출력하면 된다.
		예 ]
			System.out.println(예외클래스변수);
			
		==> 예외의 원인만 알려준다.
	2. 변수.printStackTrace() 를 이용하는 방법
		==> 예외의 정보 + 예외가 발생하게된 위치
						+ 그 경로를 추적해서 출력해준다.
		
=================================================================================================
	예외처리는
	예외가 발생하면 개발자가 그것을 수정해서 
	정상적으로 동작하도록 만드는 행위이다.
	하지만 정상적으로 동작하도록 만드는 작업은 매우 어려운 일이고 경우가 많지 않다.
	
	예외를 처리하는 실제 이유는
	예외의 정보를 알아서 사용자에게 왜 프로그램에 문제가 발생했는지를 알려주고
	그 프로그램이 "정상적으로 종료"되도록 하는것에 목적이 있다.
	
=================================================================================================
	***
	예외 전이하기
	==> 함수는 프로그램의 가장 작은 단위이다.
		한가지 작업을 하기 위해서 만든 것이다.
		따라서 함수 안에서 작업을 하다가 예외가 발생하면
		그 함수는 더이상 실행할 필요가 없는 경우가 많다.
		따라서 함수는 예외를 전이하도록 해 놓은 경우가 있다.
		
		형식 ]
			반환값타입	함수이름(매개변수리스트)	throws 	예외클래스1, 예외클래스2, ... {
			}
			
		의미 ]
			이 함수를 실행하는 도중
			지정한 예외가 발생하면 실행해도 의미가 없으므로
			이 함수를 사용하는 곳에서 반드시 예외처리 해주세요.
			
		*****
		예외가 전이된 함수는
		반드시 사용하는 곳에서 예외처리를 해줘야 한다.
		
		
		참고 ]
			함수가 예외를 전이하는 함수라도
			예외처리를 하지 않아도 되는 경우
			
			<==
				전이하는 예외가 RuntimeException 하위의 예외인 경우
				예외처리를 해도그만 안해도 그만이기때문에...
				(주로 java.lang 소속의 클래스에 있는 함수들이 이런 함수들이 많이 존재한다.)
				
				하지만 되도록 하는 것이 좋다.
				
==================================================================================================

	강제 예외 던지기
	==> JVM은 예외로 인정하지 않는데
		( 예외처리가 필요하지 않는데...)
		프로그램의 목적상 예외로 인정해야 하는 경우가 있을 수 있다.
		
		예 ]
			부서번호는 10, 20, 30, 40 중 하나를 입력하는데
			11을 입력한 경우
			JVM은 예외로 이정하지 않지만
			JVM에게 강제로 예외라고 알려줘야 하는 경우...
			
		형식 ]
			throw new 예외클래스이름();
			
=================================================================================================
	
	사용자 예외 클래스 만들기
	==> 예외 클래스는 예외의 발생원인을 알려주는 역할을 담당한다.
		그런데 강제 예외 던지기는 자바가 만들어놓은 예외가 아니기 대문에
		예외의 원인을 파악하기 힘들다.
		
		이런 경우 예외의 원인을 파악하기 위해서
		사용자가 예외 정보를 만들어주는 클래스를 따로 만들어서 사용할 수 있다.
		
		방법 ]
			1. Exception 클래스를 상속 받아서 클래스를 만든다.
			2. toString()를 오버라이드하여
				예외의 원인을 출력할 수 있도록 한다.
				
=========================================================================================================

String 클래스
==> 문자열을 관리해주는 클래스
	
	****
	주의사항 ]
		String 의 큰 단점은 
		내용이 변경이 되면 데이터자체를 변경하는 것이 아니고
		객체 다시 만들어서 기억시킨다.
		
		따라서 내용 변경이 빈번한 경우에는 메모리 소모가 심해진다.
		
		따라서 변화가 심한 문자열은 String 클래스를 사용하면 불리해진다.
		해결방법 ]
			==> StringBuffer, StringBuilder
			
	참고 ]
		간단한 문자열 처리는 자주 사용하는 클래스이므로
		"클래스 중 유일하게" new 시키지 않고 사용할 수 있도록 준비해 놓았다.
		
		String str = "홍길동";
		String hong = new String("홍길동");
		
		이 가능하다.
		이때 문자열 데이터의 비교는 반드시 equals() 로 비교해야 한다.
	
	참고 ]
		String 은 유일하게 함수를 이용하지 않고
		연산자(+) 를 이용해서 누적 처리가 가능하다.
		
=========================================================================================================
StringBuffer
==> String 과 동일하게 문자열을 관리하는 클래스이다.

	***
	차이점
		String 클래스는 변화되는 내용이 각각 새로운 메모리에 기억된다.
		
		StringBuffer 클래스는 String 클래스의 이런 문제점을 보완하기 위해서 만들어 놓은 
		또 하나의 문자열 관리 클래스로
		내용 변화가 있으면 현재 메모리에 변화된 내용을 그대로 기억한다.
		
	참고 ]
		StringBuffer는 String 과는 달리 =(대입연산자)에 의해서 문자열 기억이 불가능 하다.
		new 시켜서 사용해야 된다.
		
		StringBuffer str = "홍길동";					------> X
		
		StringBuffer str = new StringBuffer("홍길동");	------> O
		
	문자열 결합
		StringBuffer의 문자열 결합은 함수를 호출해서 처리한다.
		
		주소.append(문자열);	==> 기존의 StringBuffer 데이터에 문자열을 뒤에 덧붙여준다.
		
		StringBuffer str = new StringBuffer("Hong");
		str.append("gildong");
		
	참고 ]
		실무에서 StringBuffer의 사용법
			1. String이 편하므로 String 으로 먼저 만들어 놓는다.
				String str = "홍";
			2. 문자열이 변화가 일어나는 순간
				StringBuffer로 변환한다.
				
				StringBuffer buff = new StringBuffer(str);
				
			3. StringBuffer를 이용해서 문자열 변화를 시도한다.
			
			4. 문자열 변화가 종료되면 
				다시 편하게 사용할 수 있는 String 타입으로 변환해준다.
					
					str = buff.toString();
					
----------------------------------------------------------------------------------------------------------
StringTokenizer

 String str = "홍길동,010-1111-1111,16,대빵";
 String tmp = str;
 int cnt = 0;
 for(int i = 0 ; i < str.length() ; i++ ){
 	if(str.charAt(i) == ','){
 		cnt = cnt + 1;
 	}
 }
 
 cnt += 1;
 
 String[] arr = new String[cnt];
 int idx = 0;
 for(int i = 0 ; i < tmp.length(); i++){
 	if(tmp.charAt(i) == ','){
 		arr[idx] = tmp.substring(0, i);
 		
 		idx++;
 		
 		tmp = tmp.substring(i + 1);
 	}
 	
 }
 
 이 작업을 편하게 처리해주는 클래스
 
 ==> 하나의 문자열을 원하는 문자를 중심으로 나누어주는 기능을 가진 클래스
 
 사용하는 이유?
 
 	네트워크 등을 이용하면
 	여러개의 데이터가 한번에 들어온다.
 	
 	예 ]
 		웹의 경우
 			?id=euns&pw=1234&name=전은석&mail=euns_jun@naver.com


생성방법 ]
	1. StringTokenizer(String str)
		==> 문자열을 공백을 기준으로 나누는 기능
		
	2. StringTokenizer(String str, String delim)
		==> 문자열을 지정한 문자를 기준으로 나누는 기능
		
	3. StringTokenizer(String str, String delim, boolean returnDelims)
		==> 2 + 구분문자 포함
		
문제점 ]
	분리된 결과는 임시버퍼(스텍)에 기억된다.
	따라서 한번 사용하면 더이상 사용할 수 없게 되고
	반드시 순서대로만 꺼내야 한다.
	
주요함수 ]
	
	countTokens()	==> 나눠진 결과수를 반환
	hasMoreElements()	/ hasMoreTokens()
		==> 아직 임시버퍼에 결과가 남아있니? 라고 물어보는 함수, 반환값은 true, false 반환해준다.
	nextElement()	/	nextToken()
		==> 임시버퍼에서 데이터 꺼내는 함수
				nextElement()	: Object 타입으로 반환
				nextToken()		: 문자열로 반환


			
			
				
	
	
		
	
	
	
	
	
	
	
	
	
	
	
	