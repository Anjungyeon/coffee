# day06


-------------------------------------------------------------------------------------------------------------
멤버(Member)
	- 클래스는 해당 클래스의 속성을 기억할 변수와
							가지는 기능을 만들어놓은 함수로 이루어져있다.
							
	- 따라서 클래스가 객체가 되면
		변수와 함수도 사용할 수 있게된다.
		
	- 이 때 이 변수와 함수를 멤버라 표현한다.
	
따라서
클래스가 가지는 변수와 함수를 사용하는 방법은
먼저 클래스를 객체로 만든후
사용해야 한다.
	
	형식 ]
		
		클래스이름	변수이름 = new 클래스이름();
		변수이름.변수;
		변수이름.함수();
		
-------------------------------------------------------------------------------------------------------------

함수의 오버로딩(Overloading : 함수의 중첩)
==> 원칙적으로 같은 클래스안에서는 함수의 이름은 모두 달라야 한다.
	같은 클래스 안에서 같은 이름의 함수가 존재하면 에러가 발생한다.
	
	이러다 보니 가독성에 문제가 발생한다.
	즉, 가독성이란?
	함수의 이름만 봐도 그 함수가 어떤 기능을 가지고 있는 함수인지를 알수 있어야 하는데...
	함수의 이름을 다르게 만들다 보면
	가독성에 문제가 발생할 수 있다.
	
	이런 불편함을 해결하기 위해서 도입된 문법이
	함수의 "오버로딩"이다.
	
	함수의 오버로딩이란?
	같은 클래스안에서 같은 이름의 함수를 만들 수 있다.
	단, 다음 조건은 반드시 지켜야 한다.
	
		오버로딩 조건
			0. 함수가 존재해야 한다.
			1. 함수의 이름이 같아야 한다.
			2. 매개변수리스트가 달라야한다.
				--> 변수이름은 상관없고
					갯수 또는 순서가 달라야한다.
			3. 반환값과는 전혀 상관없다.
			
			
	***
	오버로딩은
	함수의 매개변수의 갯수, 순서, 형태 중 하나이상이 달라야 한다.
	
-------------------------------------------------------------------------------------------------------------

생성자 함수(Constructor)
==> 클래스를 사용하기 객체로 만드는 new 시키는 순간 자동 실행되는 함수.

	즉, 클래스를 new 시킨다는 것은 
	오브젝트로 만들어서 실행한다는 의미이다.
	따라서 이때 실행한다는 개념은 결국 오브젝트(객체)를 만드는 순간
	뭔가를 실행한다는 개념이다.
	이것은 물건을 만들때 필요한 뭔가 조치를 한다는 개념이다.
	==> 
		결론적으로 실제로 실행 가능한 것으로 만들기 위한 함수
		
	클래스는 한가지 목적을 달성하기 위해서 만들어진 프로그램의 기본단위이다.
	이 안에는 그 목적을 달성하기 위해 변수, 함수로 구성된다.
	하지만 그 목적을 달성하기 위해서는 기본적으로 어떤 조치가 필요한 경우가 있다.
	
	예 ]
		String
			==> 문자열을 관리할 목적으로 만들어진 클래스이다.
				==> 문자열을 기억하고 잇어야 한다.
				
		FileOutputStream
			==> 파일에 내용을 기록하기 위한 목적으로 만들어진 클래스
				==> 파일을 사용할 수 있도록 열어놓아야 할 것이다.
				
		Socket
			==> 네트워크를 구성하기 위한 목적으로 만들어진 클래스
				==> 상대방과 접속은 이루어져야 할 것이다.
				
	프로그램은 프로그램 답게 뭔가를 처리 하기 위해서는 함수가 필요하다.
	위의 경우를 비춰보면 각각의 클래스는 오브젝트로 만들어지는 순간
	그 클래스 만의 최소한의 일을 할 필요가 있더라.
	
	바로 이런일을 하기 위해 만들어 놓은 함수를
	"생성자(Constructor)"라고 부른다.
	
	생성자 함수를 만드는 이유는
	만들고자 하는 클래스이 목적에 따라
	그 클래스가 해야할 가장 기본적인 일을 처리하기 위해서 만드는 것이다.
	
	생성자함수 만드는 방법
		
		규칙 ]
			1. 함수의 이름은 반드시 클래스이름과 동일해야 한다.
			2. 반환값은 절대로 가지면 안된다.
			3. 매개변수는 가질 수 있다.
			
	주의사항 ]
		
		생성자 함수를 만들지 않아도 사용할 수 있다.
		이때는 자바가상머신(JVM)이 기본 생성자를 만들어서 호출하게 된다.
		생성자 함수를 하나라도 정의 하게 되면
		이때는 자바가상머신이 기본생성자를 만들지 않는다.
		따라서 생성자를 정의할 때는 반드시 기본생성자(매개변수가 없는 생성자)도 같이 정의하는 것이 좋다.
		
	참고 ]
		생성자 함수도 오버로딩이 가능하다.
		==> 생성자 함수도 여러개로 정의할 수 있다.
		
	생성자 함수 이용방법 
		생성자 함수는 그 클래스를 어떻게 new 시킬지를 알려주는 함수이다.
		
		즉, 생성자 함수가 요구하는 매개변수가 무엇인지를 알면
		그 클래스를 객체로 만들 수 있다.
		
	참고 ]
		this()
		==> 생성자 함수는 원칙적으로 개발자가 직접 호출할 수 없다.
			
			현재 생성자를 실행하는 도중에 다른형태의 현재 클래스의 생성자를 
			강제로 호출하는 유일한 방법
		
			***
			규칙 ]
				1. 반드시 생성자 안에서만 사용할 수 있다.
					일반함수 내에서는 절대로 사용할 수 없다.
				2. 반드시 생성자 함수의 첫문장, 첫 명령으로 사용해야 한다.
					이전에 다른 문장이 있으면 에러가 발생한다.
					
------------------------------------------------------------------------------------------------------------
				
	
